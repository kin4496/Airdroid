Index: app/src/main/java/com/example/airdroid/bluetooth/services/BluetoothConnectionService.kt
===================================================================
--- app/src/main/java/com/example/airdroid/bluetooth/services/BluetoothConnectionService.kt	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
+++ app/src/main/java/com/example/airdroid/bluetooth/services/BluetoothConnectionService.kt	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
@@ -1,40 +0,0 @@
-package com.example.airdroid.bluetooth.services
-
-import android.app.Service
-import android.bluetooth.BluetoothAdapter
-import android.bluetooth.BluetoothDevice
-import android.content.Intent
-import android.content.IntentFilter
-import android.os.IBinder
-import com.example.airdroid.bluetooth.receivers.BluetoothConnectionReceiver
-
-/** Service class for bluetooth connection/disconnection **/
-class BluetoothConnectionService : Service() {
-
-    private val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()
-
-    private val bluetoothReceiver = BluetoothConnectionReceiver()
-    private val bluetoothDeviceConnectedIntentFilter = IntentFilter(BluetoothDevice.ACTION_ACL_CONNECTED)
-    private val bluetoothDeviceDisconnectedIntentFilter = IntentFilter(BluetoothDevice.ACTION_ACL_DISCONNECTED)
-
-    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
-        if (bluetoothAdapter == null) {
-            stopSelf() // If the device does not support bluetooth, the service doesn't run
-            return super.onStartCommand(intent, flags, startId)
-        }
-
-        registerReceiver(bluetoothReceiver, bluetoothDeviceConnectedIntentFilter)
-        registerReceiver(bluetoothReceiver, bluetoothDeviceDisconnectedIntentFilter)
-
-        return super.onStartCommand(intent, flags, startId)
-    }
-
-    override fun onDestroy() {
-        super.onDestroy()
-        unregisterReceiver(bluetoothReceiver)
-    }
-
-    override fun onBind(intent: Intent?): IBinder? {
-        return null
-    }
-}
Index: app/src/main/java/com/example/airdroid/mainfragment/DeviceStatusFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.airdroid.mainfragment\n\nimport android.bluetooth.BluetoothA2dp\nimport android.bluetooth.BluetoothAdapter\nimport android.bluetooth.BluetoothDevice\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.os.Handler\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.example.airdroid.EXTRA_DEVICE\nimport com.example.airdroid.bluetooth.services.BluetoothConnectionService\nimport com.example.airdroid.mainfragment.presenter.ConnectedIntent\nimport com.example.airdroid.mainfragment.presenter.DeviceStatusContract\nimport com.example.airdroid.mainfragment.presenter.DeviceStatusIntent\nimport com.example.airdroid.mainfragment.presenter.DeviceStatusPresenter\nimport com.example.airdroid.mainfragment.presenter.StopScanIntent\nimport com.example.airdroid.mainfragment.presenter.UpdateNameIntent\nimport com.example.airdroid.mainfragment.viewmodel.DeviceViewModel\nimport com.example.airdroid.notification.NotificationService\nimport com.example.airdroid.notification.NotificationService.Companion.EXTRA_AIRPOD_MODEL\nimport com.example.airdroid.notification.NotificationService.Companion.EXTRA_AIRPOD_NAME\nimport com.example.airdroid.orElse\nimport com.hannesdorfmann.mosby3.mvi.MviFragment\nimport com.jakewharton.rxrelay2.PublishRelay\nimport io.reactivex.disposables.CompositeDisposable\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\n\nclass DeviceStatusFragment :\n    MviFragment<DeviceStatusContract.View, DeviceStatusContract.Presenter>(),\n    DeviceStatusContract.View {\n\n    private val subscriptions = CompositeDisposable()\n\n    private lateinit var view: DeviceFragmentView\n    private var viewModel = DeviceViewModel.EMPTY\n\n    private val connectionState: Int\n        get() = BluetoothAdapter.getDefaultAdapter().getProfileConnectionState(BluetoothA2dp.HEADSET)\n\n    private val actionIntentsRelay = PublishRelay.create<DeviceStatusIntent>().toSerialized()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        getMvpDelegate().onCreate(savedInstanceState)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        subscriptions.clear()\n    }\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        super.onCreateView(inflater, container, savedInstanceState)\n        val view = DeviceFragmentView(inflater, container)\n\n        this.view = view\n        return view.view\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        // When ever the app comes into the foreground we clear the notification\n        context?.let { stopNotificationService(it) }\n\n        // Here we check if a head set (ie airpods) is connected to our device\n        // Unfortunately there is no way to check is some thing that airpods are connected\n        // So we just start the scan if something might be connected\n        Handler().postDelayed(\n            {\n                if (connectionState == 2 || connectionState == 1) {\n                    activity?.intent?.getStringExtra(EXTRA_AIRPOD_NAME)?.let {\n                        actionIntentsRelay.accept(UpdateNameIntent(it))\n                    }.orElse {\n                        val deviceName = (activity?.intent?.extras?.get(EXTRA_DEVICE) as? BluetoothDevice)?.name ?: \"\"\n                        actionIntentsRelay.accept(ConnectedIntent(deviceName))\n                    }\n                }\n            },\n            1000\n        )\n    }\n\n    override fun onPause() {\n        super.onPause()\n        actionIntentsRelay.accept(StopScanIntent)\n        if (viewModel.airpods.isConnected ||\n            connectionState == 2 ||\n            connectionState == 1) {\n            startNotificationService()\n        }\n    }\n\n    override fun actionIntents() = actionIntentsRelay\n\n    override fun createPresenter() = DeviceStatusPresenter()\n\n    override fun render(viewModel: DeviceViewModel) {\n        this.viewModel = viewModel\n        view.render(viewModel)\n    }\n\n    override fun getMvpView(): DeviceStatusContract.View {\n        try {\n            return this\n        } catch (e: ClassCastException) {\n            val msg = \"Couldn't cast the View to the corresponding View interface.\"\n            Log.e(TAG, msg)\n            throw RuntimeException(msg, e)\n        }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        outState.putString(EXTRA_AIRPOD_NAME, viewModel.deviceName)\n        super.onSaveInstanceState(outState)\n    }\n\n    fun startBluetoothService() {\n        Intent(activity, BluetoothConnectionService::class.java).also { intent ->\n            activity?.startService(intent)\n        }\n    }\n\n    private fun startNotificationService() {\n        Intent(activity, NotificationService::class.java).also { intent ->\n            intent.putExtra(EXTRA_AIRPOD_MODEL, viewModel.airpods)\n            intent.putExtra(EXTRA_AIRPOD_NAME, viewModel.deviceName)\n            activity?.startService(intent)\n        }\n    }\n\n    private fun stopNotificationService(context: Context) = GlobalScope.launch(Dispatchers.Main) {\n        NotificationService.clearNotification(context)\n        Intent(activity, NotificationService::class.java).also { intent ->\n            activity?.stopService(intent)\n        }\n    }\n\n    companion object {\n        private const val TAG = \"DeviceStatusFragment\"\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/airdroid/mainfragment/DeviceStatusFragment.kt	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
+++ app/src/main/java/com/example/airdroid/mainfragment/DeviceStatusFragment.kt	(date 1564529593000)
@@ -1,5 +1,6 @@
 package com.example.airdroid.mainfragment
 
+import android.app.KeyguardManager
 import android.bluetooth.BluetoothA2dp
 import android.bluetooth.BluetoothAdapter
 import android.bluetooth.BluetoothDevice
@@ -12,7 +13,6 @@
 import android.view.View
 import android.view.ViewGroup
 import com.example.airdroid.EXTRA_DEVICE
-import com.example.airdroid.bluetooth.services.BluetoothConnectionService
 import com.example.airdroid.mainfragment.presenter.ConnectedIntent
 import com.example.airdroid.mainfragment.presenter.DeviceStatusContract
 import com.example.airdroid.mainfragment.presenter.DeviceStatusIntent
@@ -24,6 +24,7 @@
 import com.example.airdroid.notification.NotificationService.Companion.EXTRA_AIRPOD_MODEL
 import com.example.airdroid.notification.NotificationService.Companion.EXTRA_AIRPOD_NAME
 import com.example.airdroid.orElse
+import com.example.airdroid.startServiceIfDeviceUnlocked
 import com.hannesdorfmann.mosby3.mvi.MviFragment
 import com.jakewharton.rxrelay2.PublishRelay
 import io.reactivex.disposables.CompositeDisposable
@@ -121,17 +122,11 @@
         super.onSaveInstanceState(outState)
     }
 
-    fun startBluetoothService() {
-        Intent(activity, BluetoothConnectionService::class.java).also { intent ->
-            activity?.startService(intent)
-        }
-    }
-
     private fun startNotificationService() {
         Intent(activity, NotificationService::class.java).also { intent ->
             intent.putExtra(EXTRA_AIRPOD_MODEL, viewModel.airpods)
             intent.putExtra(EXTRA_AIRPOD_NAME, viewModel.deviceName)
-            activity?.startService(intent)
+            activity?.startServiceIfDeviceUnlocked(intent)
         }
     }
 
@@ -142,7 +137,9 @@
         }
     }
 
+
+
     companion object {
         private const val TAG = "DeviceStatusFragment"
     }
-}
\ No newline at end of file
+}
Index: app/src/main/java/com/example/airdroid/Constants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.airdroid\n\nconst val EXTRA_DEVICE_ADDRESS = \"DEVICE_ADDRESS\"\nconst val EXTRA_DEVICE = \"EXTRA_DEVICE\"\n\nconst val ACTION_GATT_CONNECTED = \"com.example.bluetooth.le.ACTION_GATT_CONNECTED\"\nconst val ACTION_GATT_DISCONNECTED = \"com.example.bluetooth.le.ACTION_GATT_DISCONNECTED\"\nconst val ACTION_GATT_SERVICES_DISCOVERED = \"com.example.bluetooth.le.ACTION_GATT_SERVICES_DISCOVERED\"\nconst val ACTION_DATA_AVAILABLE = \"com.example.bluetooth.le.ACTION_DATA_AVAILABLE\"\nconst val EXTRA_DATA = \"com.example.bluetooth.le.EXTRA_DATA\"\n\nconst val UUID_MASK = \"0000%s-0000-1000-8000-00805f9b34fb\"\nval UUID_CHARACTERISTIC_BATTERY_LEVEL = String.format(UUID_MASK, \"2a19\")\n\ninline fun <R> R?.orElse(block: () -> R): R {\n    return this ?: block()\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/airdroid/Constants.kt	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
+++ app/src/main/java/com/example/airdroid/Constants.kt	(date 1564529710000)
@@ -1,5 +1,9 @@
 package com.example.airdroid
 
+import android.app.KeyguardManager
+import android.content.Context
+import android.content.Intent
+
 const val EXTRA_DEVICE_ADDRESS = "DEVICE_ADDRESS"
 const val EXTRA_DEVICE = "EXTRA_DEVICE"
 
@@ -14,4 +18,9 @@
 
 inline fun <R> R?.orElse(block: () -> R): R {
     return this ?: block()
+}
+
+fun Context?.startServiceIfDeviceUnlocked(intent: Intent) {
+    val keyguardManager =  this?.getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager
+    if (!keyguardManager.isKeyguardLocked) this.startService(intent)
 }
\ No newline at end of file
Index: app/src/main/java/com/example/airdroid/bluetooth/receivers/BluetoothConnectionReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.airdroid.bluetooth.receivers\n\nimport android.bluetooth.BluetoothDevice\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android.util.Log\nimport com.example.airdroid.EXTRA_DEVICE\nimport com.example.airdroid.MainActivity\nimport com.example.airdroid.mIsActivityRunning\nimport com.example.airdroid.mainfragment.presenter.ConnectedIntent\nimport com.example.airdroid.mainfragment.presenter.DisconnectedIntent\nimport com.example.airdroid.notification.NotificationService\nimport org.greenrobot.eventbus.EventBus\n\nclass BluetoothConnectionReceiver : BroadcastReceiver() {\n\n    private val eventBus = EventBus.getDefault()\n\n    override fun onReceive(context: Context?, intent: Intent?) {\n        if (intent == null) return\n\n        val action = intent.action\n\n        when (action) {\n            BluetoothDevice.ACTION_ACL_CONNECTED -> handleBluetoothConnected(intent, context)\n            BluetoothDevice.ACTION_ACL_DISCONNECTED -> handleBluetoothDisconnected(intent, context)\n            Intent.ACTION_BOOT_COMPLETED,\n            Intent.ACTION_MY_PACKAGE_REPLACED,\n            Intent.ACTION_PACKAGE_INSTALL -> {\n            }//TODO handle reboot\n        }\n    }\n\n    private fun handleBluetoothDisconnected(intent: Intent, context: Context?) {\n        val disconnectedDevice = intent.extras[BluetoothDevice.EXTRA_DEVICE] as? BluetoothDevice\n        disconnectedDevice?.let {\n            Log.d(\n                TAG,\n                \"Device Disconnected, Name: ${disconnectedDevice.name}, Address: ${disconnectedDevice.address}\"\n            )\n        }\n        if (isActivityInForegroud()) {\n            eventBus.post(DisconnectedIntent)\n        } else {\n            context?.let { NotificationService.clearNotification(context) }\n        }\n    }\n\n    private fun handleBluetoothConnected(intent: Intent, context: Context?) {\n        val connectedDevice = intent.extras[BluetoothDevice.EXTRA_DEVICE] as? BluetoothDevice\n        connectedDevice?.let {\n\n            Log.d(TAG, \"Device Connected, Name: ${connectedDevice.name}, Address: ${connectedDevice.address}\")\n\n            if (isActivityInForegroud()) {\n                eventBus.post(ConnectedIntent(connectedDevice.name))\n            } else {\n                startMainActivity(context, connectedDevice)\n            }\n        }\n    }\n\n    private fun isActivityInForegroud(): Boolean {\n        return mIsActivityRunning\n    }\n\n    private fun startMainActivity(context: Context?, connectedDevice: BluetoothDevice) {\n        Intent(context, MainActivity::class.java).also { intent ->\n            intent.putExtra(EXTRA_DEVICE, connectedDevice)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\n            context?.startActivity(intent)\n        }\n    }\n\n    companion object {\n        private const val TAG = \"BluetoothConnectionReceiver\"\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/airdroid/bluetooth/receivers/BluetoothConnectionReceiver.kt	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
+++ app/src/main/java/com/example/airdroid/bluetooth/receivers/BluetoothConnectionReceiver.kt	(date 1564531485000)
@@ -1,30 +1,42 @@
 package com.example.airdroid.bluetooth.receivers
 
+import android.app.KeyguardManager
+import android.bluetooth.BluetoothA2dp
+import android.bluetooth.BluetoothAdapter
 import android.bluetooth.BluetoothDevice
 import android.content.BroadcastReceiver
 import android.content.Context
 import android.content.Intent
+import android.content.IntentFilter
 import android.util.Log
 import com.example.airdroid.EXTRA_DEVICE
 import com.example.airdroid.MainActivity
 import com.example.airdroid.mIsActivityRunning
 import com.example.airdroid.mainfragment.presenter.ConnectedIntent
 import com.example.airdroid.mainfragment.presenter.DisconnectedIntent
+import com.example.airdroid.mainfragment.presenter.StartScanIntent
 import com.example.airdroid.notification.NotificationService
+import com.example.airdroid.startServiceIfDeviceUnlocked
 import org.greenrobot.eventbus.EventBus
 
 class BluetoothConnectionReceiver : BroadcastReceiver() {
 
     private val eventBus = EventBus.getDefault()
 
+    private val isActivityInForegroud: Boolean
+        get() = mIsActivityRunning
+
+    private val isConnected: Boolean
+        get() = BluetoothAdapter.getDefaultAdapter().getProfileConnectionState(BluetoothA2dp.HEADSET) == 1 ||
+            BluetoothAdapter.getDefaultAdapter().getProfileConnectionState(BluetoothA2dp.HEADSET) == 2
+
     override fun onReceive(context: Context?, intent: Intent?) {
         if (intent == null) return
 
-        val action = intent.action
-
-        when (action) {
+        when (intent.action) {
             BluetoothDevice.ACTION_ACL_CONNECTED -> handleBluetoothConnected(intent, context)
             BluetoothDevice.ACTION_ACL_DISCONNECTED -> handleBluetoothDisconnected(intent, context)
+            Intent.ACTION_USER_PRESENT -> handleUnlock(context)
             Intent.ACTION_BOOT_COMPLETED,
             Intent.ACTION_MY_PACKAGE_REPLACED,
             Intent.ACTION_PACKAGE_INSTALL -> {
@@ -40,7 +52,7 @@
                 "Device Disconnected, Name: ${disconnectedDevice.name}, Address: ${disconnectedDevice.address}"
             )
         }
-        if (isActivityInForegroud()) {
+        if (isActivityInForegroud) {
             eventBus.post(DisconnectedIntent)
         } else {
             context?.let { NotificationService.clearNotification(context) }
@@ -50,19 +62,27 @@
     private fun handleBluetoothConnected(intent: Intent, context: Context?) {
         val connectedDevice = intent.extras[BluetoothDevice.EXTRA_DEVICE] as? BluetoothDevice
         connectedDevice?.let {
-
             Log.d(TAG, "Device Connected, Name: ${connectedDevice.name}, Address: ${connectedDevice.address}")
 
-            if (isActivityInForegroud()) {
+            if (isActivityInForegroud) {
                 eventBus.post(ConnectedIntent(connectedDevice.name))
+            } else if (!isDeviceLocked(context)) {
+                startMainActivity(context, connectedDevice)
             } else {
-                startMainActivity(context, connectedDevice)
+                context?.registerReceiver(this, IntentFilter(Intent.ACTION_USER_PRESENT))
             }
         }
     }
 
-    private fun isActivityInForegroud(): Boolean {
-        return mIsActivityRunning
+    private fun handleUnlock(context: Context?) {
+        if (!isConnected) return
+        if (isActivityInForegroud) {
+            eventBus.post(StartScanIntent)
+        } else {
+            Intent(context, NotificationService::class.java).also { intent ->
+                context?.startServiceIfDeviceUnlocked(intent)
+            }
+        }
     }
 
     private fun startMainActivity(context: Context?, connectedDevice: BluetoothDevice) {
@@ -73,6 +93,11 @@
         }
     }
 
+    private fun isDeviceLocked(context: Context?): Boolean {
+        val keyguardManager = context?.getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager
+        return keyguardManager.isKeyguardLocked
+    }
+
     companion object {
         private const val TAG = "BluetoothConnectionReceiver"
     }
Index: app/src/main/java/com/example/airdroid/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.airdroid\n\nimport android.app.Activity\nimport android.bluetooth.BluetoothAdapter\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport com.example.airdroid.mainfragment.DeviceStatusFragment\n\nvar mIsActivityRunning = false\n\n//TODO rename\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var deviceStatusFragment: DeviceStatusFragment\n\n    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()\n\n    private val REQUEST_ENABLE_BT = 1000 //TODO move this somewhere else\n    private val REQUEST_ENABLE_COARSE_LOCATION = 1001\n\n    private val isLocationPermissionEnabled\n        get() = ContextCompat.checkSelfPermission(\n            this,\n            android.Manifest.permission.ACCESS_FINE_LOCATION\n        ) == PackageManager.PERMISSION_GRANTED\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        deviceStatusFragment = supportFragmentManager.findFragmentById(R.id.fragment_devices) as DeviceStatusFragment\n    }\n\n    override fun onStart() {\n        super.onStart()\n\n        if (!isLocationPermissionEnabled) {\n            //TODO show explanatory dialog as to why we need this permission\n            ActivityCompat.requestPermissions(\n                this,\n                arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION),\n                REQUEST_ENABLE_COARSE_LOCATION\n            )\n        }\n\n        if (bluetoothAdapter == null) {\n            TODO(\"Handle bluetooth not supported\")\n        } else if (!bluetoothAdapter.isEnabled) {\n            val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\n            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)\n        } else if (bluetoothAdapter.isEnabled) {\n            deviceStatusFragment.startBluetoothService()\n        }\n    }\n\n    // TODO, find more elegant way to check this\n    override fun onResume() {\n        super.onResume()\n        mIsActivityRunning = true\n    }\n\n    override fun onPause() {\n        super.onPause()\n        mIsActivityRunning = false\n    }\n\n    override fun onStop() {\n        super.onStop()\n        finish()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        if (requestCode == REQUEST_ENABLE_BT) {\n            if (resultCode == Activity.RESULT_OK) {\n                Toast.makeText(this, \"Bluetooth has been enabled\", Toast.LENGTH_SHORT).show()\n                deviceStatusFragment.startBluetoothService()\n            } else if (resultCode == Activity.RESULT_CANCELED) {\n                Toast.makeText(this, \"Bluetooth is not enabled\", Toast.LENGTH_SHORT).show()\n            }\n        }\n    }\n\n    fun closeWindow(view: View) {\n        finish()\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/airdroid/MainActivity.kt	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
+++ app/src/main/java/com/example/airdroid/MainActivity.kt	(date 1564528018000)
@@ -53,8 +53,6 @@
         } else if (!bluetoothAdapter.isEnabled) {
             val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
             startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)
-        } else if (bluetoothAdapter.isEnabled) {
-            deviceStatusFragment.startBluetoothService()
         }
     }
 
@@ -78,7 +76,6 @@
         if (requestCode == REQUEST_ENABLE_BT) {
             if (resultCode == Activity.RESULT_OK) {
                 Toast.makeText(this, "Bluetooth has been enabled", Toast.LENGTH_SHORT).show()
-                deviceStatusFragment.startBluetoothService()
             } else if (resultCode == Activity.RESULT_CANCELED) {
                 Toast.makeText(this, "Bluetooth is not enabled", Toast.LENGTH_SHORT).show()
             }
Index: app/src/main/java/com/example/airdroid/mainfragment/presenter/DeviceStatusIntents.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.airdroid.mainfragment.presenter\n\nimport com.example.airdroid.AirpodModel\n\nsealed class DeviceStatusIntent\n\ndata class RefreshIntent(val updatedAirpods: AirpodModel) : DeviceStatusIntent()\n\nclass ConnectedIntent(val deviceName: String) : DeviceStatusIntent()\n\nclass InitialScanIntent(val deviceName: String) : DeviceStatusIntent()\n\nclass UpdateNameIntent(val deviceName: String) : DeviceStatusIntent()\n\nobject StopScanIntent : DeviceStatusIntent()\n\nobject DisconnectedIntent : DeviceStatusIntent()\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/airdroid/mainfragment/presenter/DeviceStatusIntents.kt	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
+++ app/src/main/java/com/example/airdroid/mainfragment/presenter/DeviceStatusIntents.kt	(date 1564528862000)
@@ -12,6 +12,8 @@
 
 class UpdateNameIntent(val deviceName: String) : DeviceStatusIntent()
 
+object StartScanIntent : DeviceStatusIntent()
+
 object StopScanIntent : DeviceStatusIntent()
 
 object DisconnectedIntent : DeviceStatusIntent()
Index: app/src/main/java/com/example/airdroid/mainfragment/presenter/DeviceStatusPresenter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.airdroid.mainfragment.presenter\n\nimport com.example.airdroid.AirpodModel\nimport com.example.airdroid.bluetooth.callbacks.AirpodLeScanCallback\nimport com.example.airdroid.mainfragment.viewmodel.DeviceFragmentReducer\nimport com.example.airdroid.mainfragment.viewmodel.DeviceViewModel\nimport com.example.airdroid.utils.BluetoothScannerUtil\nimport com.hannesdorfmann.mosby3.mvi.MviBasePresenter\nimport com.jakewharton.rxrelay2.PublishRelay\nimport io.reactivex.Observable\nimport io.reactivex.android.schedulers.AndroidSchedulers\nimport org.greenrobot.eventbus.EventBus\nimport org.greenrobot.eventbus.Subscribe\nimport org.greenrobot.eventbus.ThreadMode\n\nclass DeviceStatusPresenter : DeviceStatusContract.Presenter,\n    MviBasePresenter<DeviceStatusContract.View, DeviceViewModel>() {\n\n    private val reducer: DeviceFragmentReducer = DeviceFragmentReducer()\n\n    private val scannerUtil = BluetoothScannerUtil()\n    private val scanCallback = AirpodLeScanCallback(arrayListOf(), ::broadcastScanResult)\n\n    private val eventBus = EventBus.getDefault()\n    private val intentsRelay = PublishRelay.create<DeviceStatusIntent>().toSerialized()\n\n    override fun bindIntents() {\n\n        eventBus.register(this)\n\n        val viewModelObservable = Observable.merge(\n            intentsRelay,\n            intent(DeviceStatusContract.View::actionIntents)\n        )\n            .observeOn(AndroidSchedulers.mainThread())\n            .scan(\n                DeviceViewModel.EMPTY,\n                ::reduce\n            )\n            .distinctUntilChanged()\n\n        subscribeViewState(viewModelObservable, DeviceStatusContract.View::render)\n    }\n\n    override fun detachView() {\n        super.detachView()\n        eventBus.unregister(this)\n    }\n\n    private fun reduce(viewModel: DeviceViewModel, intent: DeviceStatusIntent): DeviceViewModel {\n        preReduce(viewModel, intent)\n        return reducer.reduce(viewModel, intent)\n    }\n\n    private fun preReduce(viewModel: DeviceViewModel, intent: DeviceStatusIntent) {\n        when (intent) {\n            is ConnectedIntent -> {\n                intentsRelay.accept(InitialScanIntent(intent.deviceName))\n                scannerUtil.startScan(scanCallback)\n            }\n            is UpdateNameIntent -> {\n                if (!scannerUtil.isScanning) scannerUtil.startScan(scanCallback)\n            }\n            is DisconnectedIntent,\n            is StopScanIntent -> {\n                scannerUtil.stopScan()\n            }\n        }\n    }\n\n    @Subscribe(threadMode = ThreadMode.MAIN)\n    fun onIntentEvent(intent: DeviceStatusIntent) {\n        intentsRelay.accept(intent)\n    }\n\n    private fun broadcastScanResult(airpodModel: AirpodModel) {\n        if (scannerUtil.isScanning) {\n            intentsRelay.accept(RefreshIntent(airpodModel))\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/airdroid/mainfragment/presenter/DeviceStatusPresenter.kt	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
+++ app/src/main/java/com/example/airdroid/mainfragment/presenter/DeviceStatusPresenter.kt	(date 1564528862000)
@@ -58,7 +58,8 @@
                 intentsRelay.accept(InitialScanIntent(intent.deviceName))
                 scannerUtil.startScan(scanCallback)
             }
-            is UpdateNameIntent -> {
+            is UpdateNameIntent,
+            is StartScanIntent-> {
                 if (!scannerUtil.isScanning) scannerUtil.startScan(scanCallback)
             }
             is DisconnectedIntent,
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.airdroid\">\n\n    <uses-permission android:name=\"android.permission.BLUETOOTH\"/>\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n\n    <uses-feature\n        android:name=\"android.hardware.bluetooth_le\"\n        android:required=\"true\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme.Transparent\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\"/>\n\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n\n        <receiver android:name=\"com.example.airdroid.bluetooth.receivers.BluetoothConnectionReceiver\"  android:exported=\"true\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n                <action android:name=\"android.intent.action.MY_PACKAGE_REPLACED\" />\n                <action android:name=\"android.intent.action.PACKAGE_INSTALL\" />\n                <action android:name=\"android.bluetooth.device.action.ACL_CONNECTED\" />\n                <action android:name=\"android.bluetooth.device.action.ACL_DISCONNECTED\" />\n            </intent-filter>\n        </receiver>\n\n        <service android:name=\"com.example.airdroid.bluetooth.services.BluetoothConnectionService\"/>\n        <service android:name=\".notification.NotificationService\"/>\n    </application>\n\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision c555ea3de38fc7abcb7cc17ea9fe413cc42f686a)
+++ app/src/main/AndroidManifest.xml	(date 1564530933000)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
     package="com.example.airdroid">
 
     <uses-permission android:name="android.permission.BLUETOOTH"/>
@@ -18,7 +19,8 @@
         android:label="@string/app_name"
         android:roundIcon="@mipmap/ic_launcher"
         android:supportsRtl="true"
-        android:theme="@style/AppTheme.Transparent">
+        android:theme="@style/AppTheme.Transparent"
+        tools:ignore="GoogleAppIndexingWarning">
         <activity android:name=".MainActivity">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN"/>
@@ -27,17 +29,21 @@
             </intent-filter>
         </activity>
 
-        <receiver android:name="com.example.airdroid.bluetooth.receivers.BluetoothConnectionReceiver"  android:exported="true">
+        <receiver
+            android:name="com.example.airdroid.bluetooth.receivers.BluetoothConnectionReceiver"
+            android:exported="true">
             <intent-filter>
-                <action android:name="android.intent.action.BOOT_COMPLETED" />
-                <action android:name="android.intent.action.MY_PACKAGE_REPLACED" />
-                <action android:name="android.intent.action.PACKAGE_INSTALL" />
-                <action android:name="android.bluetooth.device.action.ACL_CONNECTED" />
-                <action android:name="android.bluetooth.device.action.ACL_DISCONNECTED" />
+                <action android:name="android.intent.action.BOOT_COMPLETED"/>
+                <action android:name="android.intent.action.MY_PACKAGE_REPLACED"/>
+                <action android:name="android.intent.action.PACKAGE_INSTALL"/>
+                <action android:name="android.intent.action.USER_PRESENT"/>
+                <action android:name="android.intent.action.SCREEN_ON"/>
+
+                <action android:name="android.bluetooth.device.action.ACL_CONNECTED"/>
+                <action android:name="android.bluetooth.device.action.ACL_DISCONNECTED"/>
             </intent-filter>
         </receiver>
 
-        <service android:name="com.example.airdroid.bluetooth.services.BluetoothConnectionService"/>
         <service android:name=".notification.NotificationService"/>
     </application>
 
